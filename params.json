{
  "name": "Hummuslite",
  "tagline": "A CPU made in Minecraft. Uses an assembly language I wrote called HummusLite.",
  "body": "# HummusLite\r\n\r\nThe Goal is to build a functional CPU in minecraft that interprets an assembly code that I wrote called HummusLite. I chose to do this in minecraft cause why not. The name Hummus stuck because me and my friends watched [this video.](https://www.youtube.com/watch?v=_QdPW8JrYzQ) Since then, the name kinda stuck.\r\n\r\n![alt text](https://raw.githubusercontent.com/zAMLz/HummusLite/master/pictures/overview.png \"Here is a picture lol\")\r\n\r\n\r\n#### TODO List\r\n- [ ] add more user display info...\r\n\r\n# System Registers\r\nID | Name | Description\r\n---|------|----------------\r\nPC | Program Counter | Location of Current Instruction\r\nB1 | Register B1 | One of the two main registers\r\nB2 | Register B2 | One of the two main registers\r\nRS | Result Register | Stores the Current Result\r\n\r\n# Instruction Set\r\n\r\n_[4-bit OPCODE] [4-bit Argument]_\r\n\r\nOPCODE | ARGS | Instruction | Psuedo-Code | Description\r\n-------|------|-------------|-------------|------------\r\n0000 | ---- | HALT | end() | Ends the Program.\r\n0001 | xxxx | SHFF | PC = PC + 0b0000_xxxx | Moves the Program Counter Forward.\r\n0010 | xxxx | SHFB | PC = PC - 0b0000_xxxx | Moves the Program Counter Backward.\r\n0011 | zxxx | BNR |  if(RS): PC = PC + 0bzzzz_zxxx | If result is not zero, add a two's compliment number to the Program Counter, else do nothing.\r\n0100 | yyyy | INP | B(2/1) = userInput() | If the ARGS are non-zero, get user input and store it in register B2, else store it in register B1.\r\n0101 | yyyy | STR | B(2/1) = RS | If the ARGS are non-zero, store the value of register RS into B2, else store it in B1.\r\n0110 | mmmm | LDB1 | B1 = Mem[0bmmmm] | Take byte from location 0bmmmm in memory and store it into register B1.\r\n0111 | mmmm | LDB2 | B2 = Mem[0bmmmm] | Take byte from location 0bmmmm in memory and store it into register B2.\r\n1000 | xxxx | ADDB1 | RS = B1 + 0bxxxx | Add 0bxxxx to the value in B1 and store it in RS.\r\n1001 | xxxx | ADDB2 | RS = B2 + 0bxxxx | Add 0bxxxx to the value in B2 and store it in RS.\r\n1010 | cccc | BOOL | RS = Bool(0bcccc) | The behaviour of Bool is described below.\r\n1011 | --cc | ADD | RS = Add(0b00cc) | The behaviour of Add is described below.\r\n1100 | xxxx | SUBB1 | RS = B1 - 0bxxxx | Subtract 0bxxxx from the value in register B1 and store it in RS.\r\n1101 | xxxx | SUBB2 | RS = B2 - 0bxxxx | Subtract 0bxxxx from the value in register B2 and store it in RS.\r\n1110 | mmmm | STM | Mem[0bmmmm] = RS | Store result into location 0bmmmm in memory.\r\n1111 | ---- | MEMC | memoryClear() | Clear the Main Memory.\r\n\r\n#### Behaviour of BOOL\r\nThe instruction BOOL performs a boolean or a logical operation based on the current value of ARGS. Hence it can do 16 different boolean operations. Here is the list.\r\n\r\nARGS | Psuedo-Code | Description | Keyword\r\n----------|-------------|------------|-------\r\n0000 | RS = B1 & B2 | Bitwise AND | BAND\r\n0001 | RS = B1 && B2 | Logical AND | LAND\r\n0010 | RS = B1 \\| B2 | Bitwise OR | BOR\r\n0011 | RS = B1 \\|\\| B2 | Logical OR | LOR\r\n0100 | RS = B1 ^ B2 | Bitwise XOR | BXOR\r\n0101 | RS = B1 ~^ B2 | Bitwise XNOR | BXNOR\r\n0110 | RS = B1 << 1 | Left Shift on B1 | LB1\r\n0111 | RS = B2 << 1 | Left Shift on B2 | LB2\r\n1000 | RS = ~(B1 & B2) | Bitwise NAND | BNAND\r\n1001 | RS = !(B1 && B2) | Logical NAND |LNAND\r\n1010 | RS = ~(B1 \\| B2) | Bitwise NOR | BNOR\r\n1011 | RS = !(B1 \\|\\| B2) | Logical NOR | LNOR\r\n1100 | RS = ~B1 | Bitwise NOT on B1 | NB1\r\n1101 | RS = ~B2 | Bitwise NOT on B2 | NB2\r\n1110 | RS = B1 >> 1 | Right Shift on B1 | RB1\r\n1111 | RS = B2 >> 1 | Right Shift on B2 | RB2\r\n\r\n#### Behaviour of ADD\r\nThe instruction ADD simply adds register B1 and B2 in four different ways. Based on the ARGS value, it decides whether it should negate a register or two. Here is the list.\r\n\r\nARGS | Psuedo-Code | Description\r\n-----|-------------|------------\r\n00 | RS = B1 + B2 | Add B1 and B2\r\n01 | RS = B1 + (-B2) | Add B1 and -B2\r\n10 | RS = (-B1) + B2 | Add -B1 and B2\r\n11 | RS = (-B1) + (-B2) | Add -B1 and -B2\r\n\r\n# Writing your own assembly \r\nSo you want to test this out and write your own code? Well testing it out on minecraft would be hassle to debug and input into minecraft. So to aid with that, there is a python program in the hlite folder just for that purpose. Use the following command to learn how to use hlite.py. \r\n'''\r\npython hlite.py --help\r\n'''\r\n\r\n# System Design\r\nYou don't need this to start programming the system but it is useful information to see how the system works.\r\nUSEFUL INFO HERE\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}